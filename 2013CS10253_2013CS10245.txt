Algorithm:

1.	Initially BFS is implemented to distribute data into tasks that the threads will perform.
2.	DFS is implemented in a recursive manner to perform the task of getting the output from a given input state if possible with the help of some heuristics.
3.	Elimination and Lone Ranger heuristics are applied to map the values to the cells in case the value is necessary to attach to the cell in output.

------------------------------------------
Distribution among threads:

1. Different tasks are distributed among different threads using BFS on the original data. Every thread performs DFS on the data given to it and upon finishing its task, starts the next unassigned task in the queue generated by BFS, if the output generated by the thread is invalid. If the output generated by the thread is valid then no next task is performed and the threads currently executing their tasks also halt.
2. Threads are provided data from the queue one at a time. The queue is shared among all the threads but each threads extracts unique item from the queue using the omp for loop.

-------------------------------------------
Decisions:
1. Bound on queue frontier for BFS was found to be optimal as 4*thread_count.
2. A global variable was used to determine if a valid output has been found. Any completed sudoku grid, which returns 1 on calling the function isValid2(same as isValid) sets the variable's value as 1 before returning. Each thread, while performing dfs, only searches further if the value of the variable is 0. This is done to reduce the parallelism overhead.
3. While performing dfs, before branching to the node's children, the heuristics are applied to the grid. Firstly, the elimination heuristic is applied, then the lone ranger heuristic is applied. These two operations are done in a loop, until there is no change on the application of the heuristics. After this, the algorithm branches to the children.
4. To speed up the computation, instead of using int arrays to store the values possible in a cell, a 64 bit number is used. If the ith bit of the number is 1, then i is one of the values possible in the cell. This way of storing the possible values reduces the space requirement and speeds up the computation, as addition or removal from the possible values can now be done using bitwise operators. 